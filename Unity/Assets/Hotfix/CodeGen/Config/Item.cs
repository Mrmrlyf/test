//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace cfg
{
public sealed partial class Item :  Bright.Config.BeanBase 
{
    public Item(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        Price = _buf.ReadInt();
        UpgradeToItemId = _buf.ReadInt();
        if(_buf.ReadBool()){ ExpireTime = _buf.ReadLong(); } else { ExpireTime = null; }
        BatchUseable = _buf.ReadBool();
        Quality = (Quality)_buf.ReadInt();
        ExchangeStream = ItemExchange.DeserializeItemExchange(_buf);
        Rewards1 = Reward.DeserializeReward(_buf);
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Rewards2 = new System.Collections.Generic.List<Reward>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Reward _e0;  _e0 = Reward.DeserializeReward(_buf); Rewards2.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ExchangeList1 = new System.Collections.Generic.List<ItemExchange>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { ItemExchange _e0;  _e0 = ItemExchange.DeserializeItemExchange(_buf); ExchangeList1.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ExchangeList2 = new System.Collections.Generic.List<ItemExchange>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { ItemExchange _e0;  _e0 = ItemExchange.DeserializeItemExchange(_buf); ExchangeList2.Add(_e0);}}
        PostInit();
    }

    public static Item DeserializeItem(ByteBuf _buf)
    {
        return new Item(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 价格
    /// </summary>
    public int Price { get; private set; }
    /// <summary>
    /// 引用当前表
    /// </summary>
    public int UpgradeToItemId { get; private set; }
    public Item UpgradeToItemId_Ref { get; private set; }
    /// <summary>
    /// 过期时间
    /// </summary>
    public long? ExpireTime { get; private set; }
    /// <summary>
    /// 能否批量使用
    /// </summary>
    public bool BatchUseable { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public Quality Quality { get; private set; }
    /// <summary>
    /// 道具兑换配置
    /// </summary>
    public ItemExchange ExchangeStream { get; private set; }
    /// <summary>
    /// 奖励
    /// </summary>
    public Reward Rewards1 { get; private set; }
    /// <summary>
    /// 奖励列表
    /// </summary>
    public System.Collections.Generic.List<Reward> Rewards2 { get; private set; }
    /// <summary>
    /// 道具兑换配置列表1
    /// </summary>
    public System.Collections.Generic.List<ItemExchange> ExchangeList1 { get; private set; }
    /// <summary>
    /// 道具兑换配置列表2
    /// </summary>
    public System.Collections.Generic.List<ItemExchange> ExchangeList2 { get; private set; }

    public const int __ID__ = 2289459;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.UpgradeToItemId_Ref = (_tables["TbItem"] as TbItem).GetOrDefault(UpgradeToItemId);
        ExchangeStream?.Resolve(_tables);
        Rewards1?.Resolve(_tables);
        foreach(var _e in Rewards2) { _e?.Resolve(_tables); }
        foreach(var _e in ExchangeList1) { _e?.Resolve(_tables); }
        foreach(var _e in ExchangeList2) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        ExchangeStream?.TranslateText(translator);
        Rewards1?.TranslateText(translator);
        foreach(var _e in Rewards2) { _e?.TranslateText(translator); }
        foreach(var _e in ExchangeList1) { _e?.TranslateText(translator); }
        foreach(var _e in ExchangeList2) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Price:" + Price + ","
        + "UpgradeToItemId:" + UpgradeToItemId + ","
        + "ExpireTime:" + ExpireTime + ","
        + "BatchUseable:" + BatchUseable + ","
        + "Quality:" + Quality + ","
        + "ExchangeStream:" + ExchangeStream + ","
        + "Rewards1:" + Rewards1 + ","
        + "Rewards2:" + Bright.Common.StringUtil.CollectionToString(Rewards2) + ","
        + "ExchangeList1:" + Bright.Common.StringUtil.CollectionToString(ExchangeList1) + ","
        + "ExchangeList2:" + Bright.Common.StringUtil.CollectionToString(ExchangeList2) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}